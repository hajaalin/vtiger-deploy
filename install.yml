- hosts: vtiger_hosts
  sudo: yes
  vars_files:
  - vars/main.yml
  - "vars/{{ ansible_os_family }}.yml"

  vars:
  - mysql_root_password_update: true
  - vault_view: "ansible-vault view --vault-password-file=~/.ansible_vault_passes/vtiger-deploy "

  pre_tasks:
    - debug: var=install_mysql
    - debug: var=install_ssl_setup_role

  roles:
  - { role: ssl-setup, when: install_ssl_setup_role, tags: ssl }
  - geerlingguy.repo-epel
  - { role: geerlingguy.apache, tags: ssl }
  - { role: geerlingguy.mysql, when: install_mysql }
  - geerlingguy.php
  - { role: shibboleth-hy, when: use_shibboleth, tags: shib }
  - { role: vtiger, tags: vtiger }

  tasks:
  - name: install packages
    yum: name={{ item }} state=present
    with_items:
      - libselinux
      - mysql
      - openldap

  - block:
    - name: enable selinux
      selinux: state=enforcing policy=targeted
    - name: allow Apache to connect to MySQL
      command: setsebool -P httpd_can_network_connect_db 1
    # - name: allow Apache to compile template files
    #   command: chcon -R -t httpd_sys_rw_content_t {{ vtiger_root_directory }}/tpl_c/
    # - name: allow Apache to write vtiger log files
    #   command: chcon -R -t httpd_sys_rw_content_t {{ vtiger_log_dir }}
    # - name: allow Apache to write vtiger configuration file
    #   command: chcon -R -t httpd_sys_rw_content_t {{ vtiger_root_directory }}/config/config.php
    when: selinux_enabled
    tags:
      - selinux
      - vtiger

  - name: disable selinux
    selinux: state=disabled
    when: not selinux_enabled

  - name: set /etc/localtime
    file: src=/usr/share/zoneinfo/{{ vtiger_default_timezone }} dest=/etc/localtime state=link

  - name: template Apache configuration
    template:
      src: "templates/ssl.conf"
      dest: "{{ apache_conf_path }}/{{ apache_vhosts_filename }}"
      owner: root
      group: root
      mode: 0644
      backup: yes
    notify: restart apache
    tags: ssl
  - name: redirect HTTP to HTTPS
    template: src=templates/redirect.conf dest="{{ apache_conf_path }}/redirect.conf"
    notify:
      - restart apache
    tags: ssl

  - name: add user to run scripts
    user: name={{ vtiger_user }} group={{ apache_user }} state=present generate_ssh_key=yes ssh_key_bits=4096

  # - name: allow group to read vtiger installation directory
  #   shell: chmod 0750 `find {{ vtiger_root_directory }} -type d`
  # - name: allow group to read vtiger installation directory
  #   shell: chmod 0640 `find {{ vtiger_root_directory }} -type f`

  # - block:
  #   - name: template db access file for mysql root
  #     template: src=templates/mysql_opts_root.cnf dest=/root/mysql_opts_root.cnf owner=root group=root mode=0600
  #   - name: template db access file for vtiger mysql user
  #     template: src=templates/mysql_opts_vtiger.cnf dest=/home/{{ vtiger_user }}/mysql_opts_vtiger.cnf owner="{{ vtiger_user }}" group=root mode=0600
  #   - name: ensure directory for mysql dumps exists
  #     file: path="{{ vtiger_log_dir }}/mysqldump" state=directory owner={{ apache_user }} group={{ apache_user }} mode=0775
  #   - name: template mysqldump cron script
  #     template: src=templates/mysqldump.sh dest=/home/{{ vtiger_user }}/mysqldump.sh owner="{{ vtiger_user }}" group=root mode=0700
  #   - name: add cron job for dumping database
  #     cron: name="mysqldump" minute="11" hour="23" job="/home/{{ vtiger_user }}/mysqldump.sh  >> {{ vtiger_log_dir }}/mysqldump.log 2>&1" user="{{ vtiger_user }}"
  #   tags: mysqldump

  # copy encrypted files
  # - block:
  #   - name: copy list of user permissions
  #     copy: content="{{ lookup('pipe', vault_view + user_src) }}" dest={{ user_dest }} mode=0644
  #   tags:
  #     - secrets
  #     - vtiger

  # NXLog setup
  - block:
    - name: install nxlog rpm
      yum: name={{ nxlog_rpm_url }} state=present
    - name: template nxlog config
      template: src=templates/nxlog.conf dest=/etc/nxlog.conf backup=yes
      notify: restart nxlog
    - name: enable and start nxlog
      service: name=nxlog enabled=yes state=started
    when: install_nxlog
    tags:
      - nxlog

  - name: template log cleanup script
    template: src=templates/log_cleanup.sh dest=/home/{{ vtiger_user }}/log_cleanup.sh owner={{ vtiger_user }} group={{ apache_user }} mode=0700
  - name: add cron job for cleaning up logs
    cron: name="log_cleanup" minute="10" hour="2" job="/home/{{ vtiger_user }}/log_cleanup.sh >& /dev/null" user={{ vtiger_user }}

  - name: trigger apache restart (use handler in apache role)
    debug: msg="restart apache"
    notify: restart apache
    changed_when: true

  handlers:
    - name: restart nxlog
      service: name=nxlog state=restarted
